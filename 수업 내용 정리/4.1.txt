#1. 리다이렉션
 - 표준 스트림이란?
  -파일을 읽고 쓰는 과정처럼 데이터를 입출력하는 것
  -데이터가 연속적으로 흐른다는 특징
  -키보드 -> 운영체제 -> 디스플레이
    -stdin
    -stdput
    -stderr


    -out / err 다른 방식으로 (루트로) 출력된다.

  -리다이렉션(redirection)이란?
    - 입출력 방향을 다른 곳으로 바꾼다
    - 키보드에서 입력받지 않고 파일에서 받는 것
    -  디스플레이 -> 파일로 쓰는거
      예시) ls -l > 파일로 저장한다

  -리다이렉션 하는것도 셸의 역할이다. (운영체제와 파일을 연결하는 작업)
  
    1) 출력 리다이렉션
      -출력 내용을 표준 출력이 아닌 파일로 보내 저장하는것
      - syntax: 명령 > 파일이름
        ex) grep Perl animals.txt > peal.txt

      ##cat
        -concatenate : "연속으로" 이어 붙인다.
        -cat 파일이름1,2,3, .....
          -파일 1+2+3.....
          -파일 1과2
        -하나 이상의 파일을 다른 여러 종류의 파일과 연결할 때 많이 사용한다
          -파일 복사, 합침, ....
          -추가 >>

        ex) cat grades letters
        
        cat grades > grades2
        cat grades2 >> letters
        cat letters

  2) 입력 리다이렉션
    -명령 < 파일

    -wc animals.txt : 프로그램이 파일의 존재를 알고있음
    -wc < animals.txt : 리다이렉션때문에 프로그램이 파일 존재 모름


  3) 리다이렉션이 불가능한 출력
    - 표준오류는 리다이렉션이 불가능하다.
    - 단 '2>' 를 사용하면 리다이렉션이 가능해짐
    - 2>> :
    - 표준 출력과 오류 같이 리다이렉션하려면? &>
    
      예: 존재하는 파일과 존재하지 않는 파일 모두 읽어서 새로운 파일 만들자.
        line1.txt non.txt -> line2.txt
          -모두 리다이렉션 하라
          cat line1.txt non.txt 2>> line2.txt #이건 이어쓰기
          cat line1.txt non.txt &> line2.txt


  4) 입출력 모두 다 같이
    -명령 <입력파일> 출력파일
    Q. animals.txt 에서 Perl 라인의 글자(character)수 세고 결과를 파일로 (result). 입력도 리다이렉션 (한번에)
      grep Perl < animals.txt |wc -c >result

      -ls head echo cat 차이 알아둬라

      리다이렉션: 나한테 입출력 받지말고 파일에다가 해라





#2. Escape Letters
  -특정 문자가 가지고 있는 기능을 차단하게 해주는 기능
    예: \\n , \\t
    -\ (역슬래시, 백슬래시)
    -\$HOME      (echo $HOME,echo \$HOME)

  
예 : 명령 i have a cat
1) ''
  -제일 강력한 역할
  -안에 있는 모든 기능 해제함

2) ""
  -일부 기능은 해제하지 않는다
  ex)echo 'this is $HOME'
     echo "this is $HOME"

3) \
  -일부분을 지정해서 기능 해제 (문자 그대로 읽게 함)
  -큰따옴표 안에 큰 따옴표 사용하려면?
  echo "home sweet home\""
  -명령 줄 바꿔쓰기할때 많이 쓴다
    \|  나 |\ 쓰면됨 똑같은거임
   
   echo home sweet home \
   | wc -c

   cut -c animals.txt \
    | grep...... \
    | head ......

  -별명 무효화 기능
    alias gerp="grep -w"
    \grep

#3. 검색경로 
- /usr/bin 
- $PATH   
- echo $PATH | tr : "\n"
- tr <A> <B> : A -> B로 변경함

-우리가 사용하는 프로그램이 저장되어 있는 경로
-셸이 검색 경로를 순차적으로 순회하며 프로그램을 가져온다
-검색 경로 확인 명령 : which , type
  -type은 검색경로 뿐만 아니라 더 넓은 범위에서 경로 조회 (별명까지)
  -별명이 검색경로를 우선한다


#4. 초기화 파일
  - shell environment
  - 초기화파일
  - 'ls -a $HOME'  => #-a 는 숨겨진 파일까지 모두 출력
  - $HOME/.bashrc
  -vi로 파일 열기 -> 수정 -> 적용
  -source  "(source $HOME/.bashrc)"
  - 사용자가 자주 사용하는 환경 설정을 저장하여 항상 셸을 켤 때 마다 적용되도록 한다.

#5. 명령히스토리리ㅏㅣㅣ릴리리ㅣㅣ리ㅣ릴ㄹㄹㄹㄹㄹ
  - command history
  - 우리가 커맨드라인에 입력한 명령들을 셸이 저장해서 가지고 있다.
  - 히스토리를 사용해서 이전 명령을 불러와 재사용하는것이 가능하다.

  1) 히스토리 열람
    -history  (history 숫자   하면 숫자개수만큼나옴)
    -LIFO (last in first out)
    -history 10

  Q.히스토리를 가장 처음부터 10개 출력하기 (1-10)+ 한 화면에
    history | head
  Q.전체 히스토리에서 echo만 출력하기
    history |grep -w echo

  -history -c 하면 싹 날려버림

  2) 재사용
    1.커서링
    2.히스토리 확장
    3.증분 검색

    #1.커서링
      -위아래 키를 사용하여 히스토리 열람
      -간단하지만 느림
      -이전 2~3개 명령일 경우 사용
      -입력한 역순로 이전 명령을 불러옴
      
      몇개까지?
      -$HISTSIZE=-1 #무한저장

      반복되는 명령은?
      -HISTCONTROL=ignoredups  #중복되는 명령은 하나만 저장

      -모든 명령 히스토리는 $HISTFILE에 저장된다


    #2.히스토리 확장
      -특별한 표현식을 활용하는 방법
      -명령을 가져오고 실행까지 함
      - !! : 이전 명령
      - !<명령어> : 가장 마지막에 한 특정 가져와서 실행
      - !70 (히스토리 번호) 히스토리에 번호에 있는거 실행
      - !-3

      -장점: 쉽다
      -단점: 실행까지 되기때문에 조심할 것 
        -:p -확인하는거
        -!! 실행

      -!70:p  -> !!

      Q.이전 명령의 단어(word)수 세기(표현식 활용)
        !! | wc -w

        -stdout으로 활용할수있다는점


      -파일을 삭제할 때
        - !$ : 이전 명령의 마지막 내용 
          -head grades2 ($)
          -rm !$

          
          -aliias rm='rm -i'  #삭제하기 전에 확인해라

        -!* : 인수 2개 이상일 경우 매칭

    #3. 증분 검색
      -ctrl + R
      -enter
      - ctrl +j ,c,
      - ESC



요약
  -명령행 편집 효율적으로 잘하자 라고 하네요

# 1. 캐럿을 이용한 히스토리 확장
md5sum *jp | .........
^jp^jpg 로 하면 바뀐다 와!
<패턴>:s/from_cmd/to_cmd
!!:s/jp/jpg
!md5sum/jp/jpg






      
      





  

교수님왈 문제는 60문제 이상이다 ㅠㅠㅠㅠㅠ
오늘 공부한거까지 시험 출제예정

-정규 표현식 #중요
-grep
-ed
-sed #중요  (5장)


1. 정규표현식
- 와일드카드와 혼동하지 말것
  *,?,... chapter*.txt (2장)
-패턴 매칭할 때 사용한다.
-1라인 기준
-가장 긴 문자열을 매칭

  1.마침표(.)
    -any single character
    -r. # ro, rk, rc, ....
    - .x. # xxx, oxo, ....
    -[a-zA-Z]
    -echo hello world | grep '.$' 한번 해보셈

  2. ^ (caret)
    -라인의 끝
    -echo hello world | grep '^.'
    -[^] # not
    -[^a-z] #소문자가 아닌것

  3. $ (dollar)
    -라인의 끝
    - '^ $' # 빈줄

  4. [리스트]
    -[a-z]
    -[z-np-z] #o를 제외한 모든 소문자
    -grep '[Tt]he' animals.txt
    -grep -i 'the' animals.txt  ##둘다 대소문자 상관없이 가져옴

  5. *
    -zero or more
    - x* # x......
    -앞글자 한정
    
    Q.x 시작하는 단어를 찾으시오
      -x*  (x)
      -xx*  (o)


  6. \+
    -1개 이상
    x\+

  7. \?
    -zero or one

  8. \{\i,j}
    - j :
    - i
    - ,j
    -x\{10\}  #10번
    -x\{1,10\}1-10
    -x\{10,\} 10번 이상

  9. \(regex\)
    -back referencing이 가능하다
    -'^\(.\)1'  #동일한 알파벳 2개로 시작하는 라인 *aa ...ll...
    -\2\1하면 abba이런것도 해석가능??????
    - '\(a\)\(b\)\2\1'

  10. regex1 \|regex2
    regex1 or regex2

Q.
1) a-f까지 매칭
2) b나 ab 매칭
3) 2번+aaaaaab 매칭
4) 모든 글자 매칭
5) #으로 시작하는 문장 매칭
6) \로 끝나는 문장 매칭
7) 대문자로 시작하지 않는 문장 맻이
8) 빈줄이 아닌 모든 줄 매칭
9) cookie나 cake이 포함된 줄 매칭
10) w.매칭



1. '[a-f]'
2. 'b\|ab'
3. 'b\|ab\|aaaaaab'
4. 
5. '^#'
6. '\\$'
7.
8.
9.
10.

속보)답은 직접 찾아라 선언
\(_\)  이게 기본 프레임
\(a\)




1. 확장
  [a-zA-Z0-9] \w
  \w (not)
  \b : word boundary (앞뒤) h,o
  \b<regex>\b
    \< 앞 \> 뒤
  \B ell
  \s whitespave (space, tab)
  \S

2. ed
  - 텍스트 에디터
  - line-oriented text ediotr
  - 인터렉티브형
  - format : ed file
  - ed animals.txt 해보셈
  
  -치환 (a->b) 하라
    [address][명령][정규식]
    1,$/a/b    =>1부터 끝까지 중에 a를 b로 바꿔라
    1,$p 하면 전부 출력

    1,$s/[a-z]//g #global (flag)

    교수님이 실행한거 사진찍어둠 함 확인해서 참고하기

    Q.모음 지우기
    1,$s/[aeiou]//g

    참고로 빠져나오고싶으면 컨+d 누르면 빠져나갈수있음

  3. sed
    -stream editor
    -표준 입출력 사용 가능, 파이프라인 사용 가능능이버섯이다...
    -인터렉티브 (x)
    -단위 : 라인

    Q.python->PYTHON 변경 후 파일 전체 동일한 이름으로 저장하기
      1,$s/python/PYTHON/g animals.txt > animals.txt  (내가해본거 대실패)
      
      tr ''
      
      sed -i 's/python/PYTHON/g' animals.txt
      -i는 동일한 이름으로 저장ㄱㄴ

    2) sed 실행하기
      -format : sed <script><input_file> # > <out_file>
      
      Q.hello->world file
      sed 's/hello/word/g' file
      sed 's/hello/word/g' <file
      cat file | sed 's/hello/word/g' #파이프라인으로 받을수 있다

    ##### -i 옵션
      -동일한 파일에 저장한다. (in-place)
      -임시파일을 따로 저장하고 싶을 때 -iE   #fileE
      -E말고 다른걸 붙여도됨 -ix하면 filex가 됨

    ###### -n 옵션
      - p와 같이 사용하여 출력 범위를 지정한다.
        sed -n '2p' file

      -5~10줄 출력하기
        sed -n '5,10p' file # ,가 range

      Q. python이 있는 라인만 출력해줘
        sed -n 'python/p' file
      
      - ; 으로 여러 정규식 연결 가능
        sed -n '1p ; $p' file
        sed -n '1p ; $p' fileA fileB fileC
        cat fileA fileB fileC | sed -n '1p ; $p'


    ##### -e , -f
      -e : expression
      -f : file
      sed -e '1p ; $p' -f file
      - 옵션이 없으면 1번째 정규표현식 , 2번째 입력파일

      sed <option><script><input_file> # full format

  #3) script
    -format: <address><cmd><options>
    '2p'
      - adddress : 2
      - cmd : p
      - 5,10p
      - '3d'  =>3번쨰 라인을 지워라


  Q. input_file 에서 python으로 시작하는 라인 삭제하고, hello ->world로 변경한뒤 out_file에 저장하라
  sed '/^python/d ; s/hello/word/g' input_file > out_file
  sed -e '/^python/d' -e 's/hello/word/g' input_file > out_file

  Q.5번째 줄 삭제
  Q2.python, Python 포함 줄 삭제
  Q3.처음 10개 줄 중 2번 실행
  Q4. 각 줄에 첫 3글자 삭제

s'/python//g' 이것도 삭제랑 똑같을거야 아마도 지피티에 물어보기
-p, d, s q (quit)

  ##### cmd 's'
    -format" s/regex/replacement/flag
    -g
    -p : 해당부분 프린트
    -i : 대소문자 구분 없음


  Q. image.jpg.1 ,image.jpg2 image.jpg3
      >>image1.jpg, image2.jpg, image3.jpg

    - sed s/\(\)//g     지피티에 추가로 물어보기

  #####address
    -범위 지정
      '2p'
    sed '160s/a/b/'
    sed '/apple/s///'   #apple이 있는 부분에서 뭔가를 하는
    sed '/apple/!s///'
    sed '160,200s/a/b/' (범위)
    sed '160,2s/a/b/' #160만 사용하고 끝 이렇게 쓸 이유없음

    $
    1,$~2 #step==2  시험에도 왕창 낼거야 ㅎㅎㅎㅎㅎㅎㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠㅠ



#스크립트 작성
-파일에 커맨드라인 입력
-모드 변경한다.
  chmod +x file
- 실행
  name
  ./name
- 주석 #로 단다
  -라인단위














        


        




    















